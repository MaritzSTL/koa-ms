// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateLineItem {
  count: Int!
}

type AggregateRecognition {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type LineItem {
  id: ID!
  from: String!
  to: String!
  createdAt: DateTime
  updatedAt: DateTime
  amount: Int!
}

type LineItemConnection {
  pageInfo: PageInfo!
  edges: [LineItemEdge]!
  aggregate: AggregateLineItem!
}

input LineItemCreateInput {
  id: ID
  from: String!
  to: String!
  amount: Int!
}

input LineItemCreateManyInput {
  create: [LineItemCreateInput!]
  connect: [LineItemWhereUniqueInput!]
}

type LineItemEdge {
  node: LineItem!
  cursor: String!
}

enum LineItemOrderByInput {
  id_ASC
  id_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  amount_ASC
  amount_DESC
}

type LineItemPreviousValues {
  id: ID!
  from: String!
  to: String!
  createdAt: DateTime
  updatedAt: DateTime
  amount: Int!
}

input LineItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  to: String
  to_not: String
  to_in: [String!]
  to_not_in: [String!]
  to_lt: String
  to_lte: String
  to_gt: String
  to_gte: String
  to_contains: String
  to_not_contains: String
  to_starts_with: String
  to_not_starts_with: String
  to_ends_with: String
  to_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  AND: [LineItemScalarWhereInput!]
  OR: [LineItemScalarWhereInput!]
  NOT: [LineItemScalarWhereInput!]
}

type LineItemSubscriptionPayload {
  mutation: MutationType!
  node: LineItem
  updatedFields: [String!]
  previousValues: LineItemPreviousValues
}

input LineItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LineItemWhereInput
  AND: [LineItemSubscriptionWhereInput!]
}

input LineItemUpdateDataInput {
  from: String
  to: String
  amount: Int
}

input LineItemUpdateInput {
  from: String
  to: String
  amount: Int
}

input LineItemUpdateManyDataInput {
  from: String
  to: String
  amount: Int
}

input LineItemUpdateManyInput {
  create: [LineItemCreateInput!]
  update: [LineItemUpdateWithWhereUniqueNestedInput!]
  upsert: [LineItemUpsertWithWhereUniqueNestedInput!]
  delete: [LineItemWhereUniqueInput!]
  connect: [LineItemWhereUniqueInput!]
  set: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  deleteMany: [LineItemScalarWhereInput!]
  updateMany: [LineItemUpdateManyWithWhereNestedInput!]
}

input LineItemUpdateManyMutationInput {
  from: String
  to: String
  amount: Int
}

input LineItemUpdateManyWithWhereNestedInput {
  where: LineItemScalarWhereInput!
  data: LineItemUpdateManyDataInput!
}

input LineItemUpdateWithWhereUniqueNestedInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateDataInput!
}

input LineItemUpsertWithWhereUniqueNestedInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateDataInput!
  create: LineItemCreateInput!
}

input LineItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  to: String
  to_not: String
  to_in: [String!]
  to_not_in: [String!]
  to_lt: String
  to_lte: String
  to_gt: String
  to_gte: String
  to_contains: String
  to_not_contains: String
  to_starts_with: String
  to_not_starts_with: String
  to_ends_with: String
  to_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  AND: [LineItemWhereInput!]
}

input LineItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLineItem(data: LineItemCreateInput!): LineItem!
  updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
  updateManyLineItems(data: LineItemUpdateManyMutationInput!, where: LineItemWhereInput): BatchPayload!
  upsertLineItem(where: LineItemWhereUniqueInput!, create: LineItemCreateInput!, update: LineItemUpdateInput!): LineItem!
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteManyLineItems(where: LineItemWhereInput): BatchPayload!
  createRecognition(data: RecognitionCreateInput!): Recognition!
  updateRecognition(data: RecognitionUpdateInput!, where: RecognitionWhereUniqueInput!): Recognition
  updateManyRecognitions(data: RecognitionUpdateManyMutationInput!, where: RecognitionWhereInput): BatchPayload!
  upsertRecognition(where: RecognitionWhereUniqueInput!, create: RecognitionCreateInput!, update: RecognitionUpdateInput!): Recognition!
  deleteRecognition(where: RecognitionWhereUniqueInput!): Recognition
  deleteManyRecognitions(where: RecognitionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
  lineItemsConnection(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineItemConnection!
  recognition(where: RecognitionWhereUniqueInput!): Recognition
  recognitions(where: RecognitionWhereInput, orderBy: RecognitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recognition]!
  recognitionsConnection(where: RecognitionWhereInput, orderBy: RecognitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecognitionConnection!
  node(id: ID!): Node
}

type Recognition {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  note: String!
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
}

type RecognitionConnection {
  pageInfo: PageInfo!
  edges: [RecognitionEdge]!
  aggregate: AggregateRecognition!
}

input RecognitionCreateInput {
  id: ID
  note: String!
  lineItems: LineItemCreateManyInput
}

type RecognitionEdge {
  node: Recognition!
  cursor: String!
}

enum RecognitionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  note_ASC
  note_DESC
}

type RecognitionPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  note: String!
}

type RecognitionSubscriptionPayload {
  mutation: MutationType!
  node: Recognition
  updatedFields: [String!]
  previousValues: RecognitionPreviousValues
}

input RecognitionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecognitionWhereInput
  AND: [RecognitionSubscriptionWhereInput!]
}

input RecognitionUpdateInput {
  note: String
  lineItems: LineItemUpdateManyInput
}

input RecognitionUpdateManyMutationInput {
  note: String
}

input RecognitionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  note: String
  note_not: String
  note_in: [String!]
  note_not_in: [String!]
  note_lt: String
  note_lte: String
  note_gt: String
  note_gte: String
  note_contains: String
  note_not_contains: String
  note_starts_with: String
  note_not_starts_with: String
  note_ends_with: String
  note_not_ends_with: String
  lineItems_some: LineItemWhereInput
  AND: [RecognitionWhereInput!]
}

input RecognitionWhereUniqueInput {
  id: ID
}

type Subscription {
  lineItem(where: LineItemSubscriptionWhereInput): LineItemSubscriptionPayload
  recognition(where: RecognitionSubscriptionWhereInput): RecognitionSubscriptionPayload
}
`