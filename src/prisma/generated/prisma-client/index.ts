// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  lineItem: (where?: LineItemWhereInput) => Promise<boolean>;
  recognition: (where?: RecognitionWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  lineItem: (where: LineItemWhereUniqueInput) => LineItemNullablePromise;
  lineItems: (args?: {
    where?: LineItemWhereInput;
    orderBy?: LineItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<LineItem>;
  lineItemsConnection: (args?: {
    where?: LineItemWhereInput;
    orderBy?: LineItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LineItemConnectionPromise;
  recognition: (
    where: RecognitionWhereUniqueInput
  ) => RecognitionNullablePromise;
  recognitions: (args?: {
    where?: RecognitionWhereInput;
    orderBy?: RecognitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Recognition>;
  recognitionsConnection: (args?: {
    where?: RecognitionWhereInput;
    orderBy?: RecognitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecognitionConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLineItem: (data: LineItemCreateInput) => LineItemPromise;
  updateLineItem: (args: {
    data: LineItemUpdateInput;
    where: LineItemWhereUniqueInput;
  }) => LineItemPromise;
  updateManyLineItems: (args: {
    data: LineItemUpdateManyMutationInput;
    where?: LineItemWhereInput;
  }) => BatchPayloadPromise;
  upsertLineItem: (args: {
    where: LineItemWhereUniqueInput;
    create: LineItemCreateInput;
    update: LineItemUpdateInput;
  }) => LineItemPromise;
  deleteLineItem: (where: LineItemWhereUniqueInput) => LineItemPromise;
  deleteManyLineItems: (where?: LineItemWhereInput) => BatchPayloadPromise;
  createRecognition: (data: RecognitionCreateInput) => RecognitionPromise;
  updateRecognition: (args: {
    data: RecognitionUpdateInput;
    where: RecognitionWhereUniqueInput;
  }) => RecognitionPromise;
  updateManyRecognitions: (args: {
    data: RecognitionUpdateManyMutationInput;
    where?: RecognitionWhereInput;
  }) => BatchPayloadPromise;
  upsertRecognition: (args: {
    where: RecognitionWhereUniqueInput;
    create: RecognitionCreateInput;
    update: RecognitionUpdateInput;
  }) => RecognitionPromise;
  deleteRecognition: (where: RecognitionWhereUniqueInput) => RecognitionPromise;
  deleteManyRecognitions: (
    where?: RecognitionWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  lineItem: (
    where?: LineItemSubscriptionWhereInput
  ) => LineItemSubscriptionPayloadSubscription;
  recognition: (
    where?: RecognitionSubscriptionWhereInput
  ) => RecognitionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LineItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type RecognitionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "note_ASC"
  | "note_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LineItemUpdateInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  amount?: Maybe<Int>;
}

export type LineItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LineItemUpdateDataInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface RecognitionCreateInput {
  id?: Maybe<ID_Input>;
  note: String;
  lineItems?: Maybe<LineItemCreateManyInput>;
}

export interface LineItemUpdateWithWhereUniqueNestedInput {
  where: LineItemWhereUniqueInput;
  data: LineItemUpdateDataInput;
}

export interface LineItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LineItemWhereInput>;
  AND?: Maybe<
    LineItemSubscriptionWhereInput[] | LineItemSubscriptionWhereInput
  >;
}

export interface LineItemUpdateManyInput {
  create?: Maybe<LineItemCreateInput[] | LineItemCreateInput>;
  update?: Maybe<
    | LineItemUpdateWithWhereUniqueNestedInput[]
    | LineItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | LineItemUpsertWithWhereUniqueNestedInput[]
    | LineItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<LineItemWhereUniqueInput[] | LineItemWhereUniqueInput>;
  connect?: Maybe<LineItemWhereUniqueInput[] | LineItemWhereUniqueInput>;
  set?: Maybe<LineItemWhereUniqueInput[] | LineItemWhereUniqueInput>;
  disconnect?: Maybe<LineItemWhereUniqueInput[] | LineItemWhereUniqueInput>;
  deleteMany?: Maybe<LineItemScalarWhereInput[] | LineItemScalarWhereInput>;
  updateMany?: Maybe<
    | LineItemUpdateManyWithWhereNestedInput[]
    | LineItemUpdateManyWithWhereNestedInput
  >;
}

export interface LineItemUpdateManyDataInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface RecognitionUpdateInput {
  note?: Maybe<String>;
  lineItems?: Maybe<LineItemUpdateManyInput>;
}

export interface LineItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  to?: Maybe<String>;
  to_not?: Maybe<String>;
  to_in?: Maybe<String[] | String>;
  to_not_in?: Maybe<String[] | String>;
  to_lt?: Maybe<String>;
  to_lte?: Maybe<String>;
  to_gt?: Maybe<String>;
  to_gte?: Maybe<String>;
  to_contains?: Maybe<String>;
  to_not_contains?: Maybe<String>;
  to_starts_with?: Maybe<String>;
  to_not_starts_with?: Maybe<String>;
  to_ends_with?: Maybe<String>;
  to_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<LineItemScalarWhereInput[] | LineItemScalarWhereInput>;
  OR?: Maybe<LineItemScalarWhereInput[] | LineItemScalarWhereInput>;
  NOT?: Maybe<LineItemScalarWhereInput[] | LineItemScalarWhereInput>;
}

export interface LineItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  to?: Maybe<String>;
  to_not?: Maybe<String>;
  to_in?: Maybe<String[] | String>;
  to_not_in?: Maybe<String[] | String>;
  to_lt?: Maybe<String>;
  to_lte?: Maybe<String>;
  to_gt?: Maybe<String>;
  to_gte?: Maybe<String>;
  to_contains?: Maybe<String>;
  to_not_contains?: Maybe<String>;
  to_starts_with?: Maybe<String>;
  to_not_starts_with?: Maybe<String>;
  to_ends_with?: Maybe<String>;
  to_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<LineItemWhereInput[] | LineItemWhereInput>;
}

export interface LineItemUpdateManyMutationInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface LineItemCreateManyInput {
  create?: Maybe<LineItemCreateInput[] | LineItemCreateInput>;
  connect?: Maybe<LineItemWhereUniqueInput[] | LineItemWhereUniqueInput>;
}

export interface LineItemCreateInput {
  id?: Maybe<ID_Input>;
  from: String;
  to: String;
  amount: Int;
}

export interface RecognitionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  note?: Maybe<String>;
  note_not?: Maybe<String>;
  note_in?: Maybe<String[] | String>;
  note_not_in?: Maybe<String[] | String>;
  note_lt?: Maybe<String>;
  note_lte?: Maybe<String>;
  note_gt?: Maybe<String>;
  note_gte?: Maybe<String>;
  note_contains?: Maybe<String>;
  note_not_contains?: Maybe<String>;
  note_starts_with?: Maybe<String>;
  note_not_starts_with?: Maybe<String>;
  note_ends_with?: Maybe<String>;
  note_not_ends_with?: Maybe<String>;
  lineItems_some?: Maybe<LineItemWhereInput>;
  AND?: Maybe<RecognitionWhereInput[] | RecognitionWhereInput>;
}

export type RecognitionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LineItemUpdateManyWithWhereNestedInput {
  where: LineItemScalarWhereInput;
  data: LineItemUpdateManyDataInput;
}

export interface RecognitionUpdateManyMutationInput {
  note?: Maybe<String>;
}

export interface RecognitionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecognitionWhereInput>;
  AND?: Maybe<
    RecognitionSubscriptionWhereInput[] | RecognitionSubscriptionWhereInput
  >;
}

export interface LineItemUpsertWithWhereUniqueNestedInput {
  where: LineItemWhereUniqueInput;
  update: LineItemUpdateDataInput;
  create: LineItemCreateInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RecognitionPreviousValues {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  note: String;
}

export interface RecognitionPreviousValuesPromise
  extends Promise<RecognitionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  note: () => Promise<String>;
}

export interface RecognitionPreviousValuesSubscription
  extends Promise<AsyncIterator<RecognitionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  note: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLineItem {
  count: Int;
}

export interface AggregateLineItemPromise
  extends Promise<AggregateLineItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLineItemSubscription
  extends Promise<AsyncIterator<AggregateLineItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LineItemSubscriptionPayload {
  mutation: MutationType;
  node: LineItem;
  updatedFields: String[];
  previousValues: LineItemPreviousValues;
}

export interface LineItemSubscriptionPayloadPromise
  extends Promise<LineItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LineItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LineItemPreviousValuesPromise>() => T;
}

export interface LineItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LineItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LineItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LineItemPreviousValuesSubscription>() => T;
}

export interface LineItemEdge {
  node: LineItem;
  cursor: String;
}

export interface LineItemEdgePromise
  extends Promise<LineItemEdge>,
    Fragmentable {
  node: <T = LineItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LineItemEdgeSubscription
  extends Promise<AsyncIterator<LineItemEdge>>,
    Fragmentable {
  node: <T = LineItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RecognitionEdge {
  node: Recognition;
  cursor: String;
}

export interface RecognitionEdgePromise
  extends Promise<RecognitionEdge>,
    Fragmentable {
  node: <T = RecognitionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecognitionEdgeSubscription
  extends Promise<AsyncIterator<RecognitionEdge>>,
    Fragmentable {
  node: <T = RecognitionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LineItem {
  id: ID_Output;
  from: String;
  to: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  amount: Int;
}

export interface LineItemPromise extends Promise<LineItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  amount: () => Promise<Int>;
}

export interface LineItemSubscription
  extends Promise<AsyncIterator<LineItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface LineItemNullablePromise
  extends Promise<LineItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  amount: () => Promise<Int>;
}

export interface LineItemConnection {
  pageInfo: PageInfo;
  edges: LineItemEdge[];
}

export interface LineItemConnectionPromise
  extends Promise<LineItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LineItemEdge>>() => T;
  aggregate: <T = AggregateLineItemPromise>() => T;
}

export interface LineItemConnectionSubscription
  extends Promise<AsyncIterator<LineItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LineItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLineItemSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LineItemPreviousValues {
  id: ID_Output;
  from: String;
  to: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  amount: Int;
}

export interface LineItemPreviousValuesPromise
  extends Promise<LineItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  amount: () => Promise<Int>;
}

export interface LineItemPreviousValuesSubscription
  extends Promise<AsyncIterator<LineItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface RecognitionConnection {
  pageInfo: PageInfo;
  edges: RecognitionEdge[];
}

export interface RecognitionConnectionPromise
  extends Promise<RecognitionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecognitionEdge>>() => T;
  aggregate: <T = AggregateRecognitionPromise>() => T;
}

export interface RecognitionConnectionSubscription
  extends Promise<AsyncIterator<RecognitionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecognitionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecognitionSubscription>() => T;
}

export interface AggregateRecognition {
  count: Int;
}

export interface AggregateRecognitionPromise
  extends Promise<AggregateRecognition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecognitionSubscription
  extends Promise<AsyncIterator<AggregateRecognition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Recognition {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  note: String;
}

export interface RecognitionPromise extends Promise<Recognition>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  note: () => Promise<String>;
  lineItems: <T = FragmentableArray<LineItem>>(args?: {
    where?: LineItemWhereInput;
    orderBy?: LineItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RecognitionSubscription
  extends Promise<AsyncIterator<Recognition>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  note: () => Promise<AsyncIterator<String>>;
  lineItems: <T = Promise<AsyncIterator<LineItemSubscription>>>(args?: {
    where?: LineItemWhereInput;
    orderBy?: LineItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RecognitionNullablePromise
  extends Promise<Recognition | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  note: () => Promise<String>;
  lineItems: <T = FragmentableArray<LineItem>>(args?: {
    where?: LineItemWhereInput;
    orderBy?: LineItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RecognitionSubscriptionPayload {
  mutation: MutationType;
  node: Recognition;
  updatedFields: String[];
  previousValues: RecognitionPreviousValues;
}

export interface RecognitionSubscriptionPayloadPromise
  extends Promise<RecognitionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecognitionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecognitionPreviousValuesPromise>() => T;
}

export interface RecognitionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecognitionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecognitionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecognitionPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Recognition",
    embedded: false
  },
  {
    name: "LineItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
